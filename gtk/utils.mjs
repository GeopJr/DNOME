const TEMPLATE_COMMENT = `// This file is for gtk variables
// generated by grab_theme_colors.rb
// Delete this file to disable gtk theming`
const DEFINE_REGEX = /@define-color ([a-zA-Z0-9_-]+) (#[a-fA-F0-9]+);/gim

/**
 * @param {string} name 
 * @param {string} value 
 * @param {boolean} [same_for_light=false] 
 * @returns {string}
 */
export function generate_less_variable (name, value, same_for_light = false) {
    let res = `@${name}: ${value};`
    if (same_for_light) res += `\n@${name}-light: ${value};`
    return res
}

/**
 * @param {Object.<string, string>} gtk_less_variables 
 * @returns {string[]}
 */
export function generate_less (gtk_less_variables) {
    let res = [
        generate_less_variable("hover_modifier", "tint(@bg, 15%)"),
        generate_less_variable("hover_modifier-light", "shade(@bg-light, 15%)"),
        generate_less_variable("item_selected_hover", "tint(@bg, 20%)"),
        generate_less_variable("item_selected_hover-light", "shade(@bg-light, 25%)"),
        generate_less_variable("item_selected", "tint(@bg, 25%)"),
        generate_less_variable("item_selected-light", "shade(@bg-light, 30%)")
    ]

    if ("@gtk_accent_bg_color" in gtk_less_variables)
        res.push(generate_less_variable("accent", "@gtk_accent_bg_color", true))
    if ("@gtk_destructive_bg_color" in gtk_less_variables)
        res.push(generate_less_variable("error", "@gtk_destructive_bg_color", true))
    if ("@gtk_orange_3" in gtk_less_variables)
        res.push(generate_less_variable("warning", "@gtk_accent_bg_color"))
    if ("@gtk_orange_2" in gtk_less_variables)
        res.push(generate_less_variable("warning-light", "@gtk_accent_bg_color"))
    if ("@gtk_window_bg_color" in gtk_less_variables)
        res.push(generate_less_variable("bg", "@gtk_window_bg_color", true))
    if ("@gtk_view_bg_color" in gtk_less_variables)
        res.push(generate_less_variable("base", "@gtk_view_bg_color", true))
    if ("@gtk_dialog_bg_color" in gtk_less_variables)
        res.push(generate_less_variable("floating", "@gtk_dialog_bg_color", true))
    if ("@gtk_headerbar_bg_color" in gtk_less_variables)
        res.push(generate_less_variable("searchbox", "@gtk_headerbar_bg_color", true))

    if ("@gtk_view_bg_color" in gtk_less_variables) {
        res.push(generate_less_variable("border", "lighten(@gtk_view_bg_color, 15%)"))
        res.push(generate_less_variable("border-light", "darken(@gtk_view_bg_color, 15%)"))
    }

    if ("@gtk_window_fg_color" in gtk_less_variables) {
        res.push(generate_less_variable("fg", "@gtk_window_fg_color", true))
        res.push(generate_less_variable("text-color", "@gtk_window_fg_color", true))
    }

    if ("@gtk_popover_bg_color" in gtk_less_variables) {
        res.push(generate_less_variable("popover_hover", "tint(@gtk_popover_bg_color, 10%)"))
        res.push(generate_less_variable("popover_hover-light", "shade(@gtk_popover_bg_color, 10%)"))
        res.push(generate_less_variable("popover_selected", "tint(@gtk_popover_bg_color, 15%)"))
        res.push(generate_less_variable("popover_selected-light", "shade(@gtk_popover_bg_color, 15%)"))
    }

    return res
}

/**
 * @param {string[]} gtk_less_variables 
 * @param {string[]} less_variables 
 * @returns {string}
 */
export function generate_file_content (gtk_less_variables, less_content) {
    return `${TEMPLATE_COMMENT}

${gtk_less_variables.join("\n")}

${less_content.join("\n")}
`
}

/**
 * @param {string} gtk_theme
 * @returns {Object.<string, string>}
 */
export function get_gtk_colors (gtk_theme) {
    let res = {}

    for (const value of gtk_theme.matchAll(DEFINE_REGEX)) {
        res[`@gtk_${value[1]}`] = value[2]
    }
    
    return res
}

/**
 * @param {Object.<string, string>} gtk_variables 
 * @returns {string[]}
 */
export function gtk_variables_to_less (gtk_variables) {
    return Object.entries(gtk_variables).map (x => `${x[0]}: ${x[1]};`);
}